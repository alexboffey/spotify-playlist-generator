# import * from "../generated/prisma.graphql"

enum TimeRange {
  long_term
  medium_term
  short_term
}

enum SearchType {
  artist
  track
}

type User {
  id: String!
  name: String!
  email: String!
  spotifyId: String!
  images: [Image]
}

type Query {
  me: User
  myTopTracks(limit: Int, offset: Int, time_range: TimeRange!): Tracks
  myTopArtists(limit: Int, offset: Int, time_range: TimeRange!): Artists
  getRecommendations(
    limit: Int
    seed_artists: String
    seed_tracks: String
    seed_genres: String
  ): Recommendations
  generatePlaylist(seeds: String): Recommendations
  search(query: String!, type: SearchType!, limit: Int): Search
}

# type Mutation {}

type Search {
  artists: Artists
  tracks: Tracks
  albums: Albums
}

type Recommendations {
  tracks: [Track]
  seeds: [Seed]
}

type Artists {
  items: [Artist]
  next: String
  previous: String
  total: Int!
  limit: Int!
  href: String!
}

type Artist {
  href: String!
  id: String!
  name: String!
  popularity: Int
  type: String!
  uri: String!
  external_urls: ExternalUrls
  images: [Image]
  followers: Followers
  genres: [String]
}

type Followers {
  href: String
  total: Int
}

type Albums {
  items: [Album]
  next: String
  previous: String
  total: Int!
  limit: Int!
  href: String!
}

type Album {
  id: String!
  href: String!
  name: String!
  release_date: String!
  release_date_precision: String!
  type: String!
  uri: String!
  album_type: String!
  artists: [Artist]!
  external_urls: ExternalUrls
  images: [Image]
}

type Tracks {
  items: [Track]
  next: String
  previous: String
  total: Int!
  limit: Int!
  href: String!
}

type Track {
  id: String!
  name: String!
  href: String!
  popularity: Int!
  preview_url: String
  track_number: Int!
  type: String!
  uri: String!
  duration_ms: Int!
  is_local: Boolean
  explicit: Boolean
  album: Album!
  external_urls: ExternalUrls
  artists: [Artist]
  is_playable: Boolean
}

type ExternalUrls {
  spotify: String!
}

type Image {
  height: Int!
  width: Int!
  url: String!
}

type Seed {
  initialPoolSize: Int
  afterFilteringSize: Int
  afterRelinkingSize: Int
  href: String
  id: String
  type: String
}
